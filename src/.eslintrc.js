const path = require('path');

module.exports = {
  extends: ['../.eslintrc.js'],
  overrides: [
    {
      files: ['*.gql'],
      parser: '@graphql-eslint/eslint-plugin',
      plugins: ['@graphql-eslint'],
      rules: {
        '@graphql-eslint/no-unreachable-types': 'error',
        '@graphql-eslint/no-deprecated': 'error',
        '@graphql-eslint/unique-fragment-name': 'error',
        '@graphql-eslint/unique-operation-name': 'error',
        '@graphql-eslint/no-anonymous-operations': 'error',
        '@graphql-eslint/no-operation-name-suffix': 'error',
        '@graphql-eslint/require-id-when-available': 'error',
        '@graphql-eslint/avoid-duplicate-fields': 'error',
        '@graphql-eslint/input-name': ['error', { checkInputType: true }],
        '@graphql-eslint/executable-definitions': 'error',
        '@graphql-eslint/fields-on-correct-type': 'error',
        '@graphql-eslint/fragments-on-composite-type': 'error',
        '@graphql-eslint/known-argument-names': 'error',
        '@graphql-eslint/known-directives': 'error',
        '@graphql-eslint/known-fragment-names': 'error',
        '@graphql-eslint/known-type-names': 'error',
        '@graphql-eslint/lone-anonymous-operation': 'error',
        '@graphql-eslint/lone-schema-definition': 'error',
        '@graphql-eslint/no-fragment-cycles': 'error',
        '@graphql-eslint/no-undefined-variables': 'error',
        '@graphql-eslint/no-unused-fragments': 'error',
        '@graphql-eslint/no-unused-variables': 'error',
        '@graphql-eslint/overlapping-fields-can-be-merged': 'error',
        '@graphql-eslint/possible-fragment-spread': 'error',
        '@graphql-eslint/possible-type-extension': 'error',
        '@graphql-eslint/provided-required-arguments': 'error',
        '@graphql-eslint/scalar-leafs': 'error',
        '@graphql-eslint/one-field-subscriptions': 'error',
        '@graphql-eslint/unique-argument-names': 'error',
        '@graphql-eslint/unique-directive-names': 'error',
        '@graphql-eslint/unique-enum-value-names': 'error',
        '@graphql-eslint/unique-field-definition-names': 'error',
        '@graphql-eslint/unique-input-field-names': 'error',
        '@graphql-eslint/unique-operation-types': 'error',
        '@graphql-eslint/unique-type-names': 'error',
        '@graphql-eslint/unique-variable-names': 'error',
        '@graphql-eslint/value-literals-of-correct-type': 'error',
        '@graphql-eslint/variables-are-input-types': 'error',
        '@graphql-eslint/variables-in-allowed-position': 'error',
      },
    },
    {
      files: ['*.ts', '*.tsx', '.yaml', '.json', '.yml', '.html'],
      parser: '@typescript-eslint/parser',
      plugins: ['@emotion', '@typescript-eslint', 'react-hooks', 'react'],
      extends: [
        '../.eslintrc.js',
        'airbnb/hooks',
        'plugin:@typescript-eslint/recommended',
        'plugin:@typescript-eslint/recommended-requiring-type-checking',
      ],
      parserOptions: {
        project: [path.resolve(__dirname, '..', 'tsconfig.json')],
        sourceType: 'module',
        extraFileExtensions: ['.yaml', '.json', '.yml', '.html'],
        ecmaFeatures: { jsx: true },
      },
      env: { node: true },
      settings: { react: { version: 'detect' } },
      rules: {
        '@typescript-eslint/ban-ts-comment': ['error', { 'ts-ignore': 'allow-with-description' }],
        '@typescript-eslint/no-unnecessary-boolean-literal-compare': 'error',
        '@typescript-eslint/no-unnecessary-condition': 'warn',
        '@typescript-eslint/no-unnecessary-qualifier': 'error',
        '@typescript-eslint/no-unnecessary-type-arguments': 'error',
        '@typescript-eslint/no-unused-expressions': 'error',
        '@typescript-eslint/no-unused-vars': ['error', { ignoreRestSiblings: true }],
        '@typescript-eslint/no-unused-vars': [
          'error',
          { ignoreRestSiblings: true, argsIgnorePattern: '^_+' },
        ],
        '@typescript-eslint/no-use-before-define': 'error',
        '@typescript-eslint/prefer-includes': 'error',
        '@typescript-eslint/prefer-nullish-coalescing': 'error',
        '@typescript-eslint/prefer-optional-chain': 'error',
        '@typescript-eslint/promise-function-async': 'error',
        '@typescript-eslint/switch-exhaustiveness-check': 'error',
        '@typescript-eslint/unified-signatures': 'error',
        'import/no-anonymous-default-export': 'error',
        'no-console': 'error',
        'no-duplicate-imports': 'error',
        'no-prototype-builtins': 'off',
        'no-unused-vars': ['error', { ignoreRestSiblings: true, argsIgnorePattern: '^_+' }],
        'no-use-before-define': 'off',
        'react-hooks/exhaustive-deps': 'warn',
        'react-hooks/rules-of-hooks': 'error',
        'react/jsx-curly-brace-presence': ['error', 'never'],
        'react/jsx-filename-extension': ['error', { extensions: ['.js', '.jsx', '.ts', '.tsx'] }],
        'react/jsx-props-no-spreading': 'off',
        'react/jsx-uses-react': 'off',
        'react/prop-types': ['error', { skipUndeclared: true }],
        'react/react-in-jsx-scope': 'off',
        semi: ['error', 'always'],
        'space-before-function-paren': [
          'error',
          { anonymous: 'always', named: 'never', asyncArrow: 'always' },
        ],
      },
    },
  ],
};
